import React, { useState } from 'react';
import { jsPDF } from 'jspdf';
import html2canvas from 'html2canvas';
import toast from 'react-hot-toast';
import { motion } from 'framer-motion';

const ExportManager = ({ analyzedResumes = [], selectedResume, aiInsights }) => {
  const [isExporting, setIsExporting] = useState(false);

  // üîß REAL PDF GENERATION FUNCTION
  const generatePDFReport = async () => {
    if (!selectedResume) {
      toast.error('Please select a resume to export');
      return;
    }

    setIsExporting(true);
    
    try {
      toast.loading('üìÑ Generating PDF report...', { id: 'pdf-export' });

      const doc = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4'
      });

      // Header
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(24);
      doc.setTextColor(59, 130, 246);
      doc.text('üìä Resume Analysis Report', 20, 25);
      
      let yPosition = 45;
      
      // File Information
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(16);
      doc.setTextColor(0, 0, 0);
      doc.text('üìã File Information', 20, yPosition);
      yPosition += 10;
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(11);
      doc.text(`File Name: ${selectedResume.fileName || 'Unknown'}`, 25, yPosition);
      yPosition += 6;
      doc.text(`Analysis Date: ${new Date(selectedResume.analyzedAt).toLocaleDateString()}`, 25, yPosition);
      yPosition += 6;
      doc.text(`Pages: ${selectedResume.analysis.pageCount || 1}`, 25, yPosition);
      yPosition += 15;

      // Skills Analysis
      const { skillAnalysis, qualityMetrics } = selectedResume.analysis;
      
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(16);
      doc.text('üíº Skills Analysis', 20, yPosition);
      yPosition += 10;
      
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(11);
      doc.text(`Total Skills: ${skillAnalysis?.totalSkills || 0}`, 25, yPosition);
      yPosition += 6;
      doc.text(`High Confidence: ${skillAnalysis?.highConfidenceSkills || 0}`, 25, yPosition);
      yPosition += 6;
      doc.text(`Expert Level: ${skillAnalysis?.expertSkills || 0}`, 25, yPosition);
      yPosition += 15;

      // Top Skills
      if (skillAnalysis?.topSkills?.length > 0) {
        doc.text('üéØ Top Skills:', 25, yPosition);
        yPosition += 8;
        
        skillAnalysis.topSkills.slice(0, 10).forEach((skill, index) => {
          const skillName = skill.name || skill;
          doc.text(`${index + 1}. ${skillName}`, 30, yPosition);
          yPosition += 5;
        });
        yPosition += 10;
      }

      // Quality Metrics
      if (qualityMetrics) {
        doc.setFont('helvetica', 'bold');
        doc.setFontSize(16);
        doc.text('üìà Quality Metrics', 20, yPosition);
        yPosition += 10;
        
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(11);
        doc.text(`Overall Score: ${qualityMetrics.overallScore || Math.round(selectedResume.analysis.confidence * 100)}%`, 25, yPosition);
        yPosition += 6;
        doc.text(`Section Completeness: ${qualityMetrics.sectionCompleteness}%`, 25, yPosition);
        yPosition += 6;
        doc.text(`Skill Diversity: ${qualityMetrics.skillDiversity}%`, 25, yPosition);
        yPosition += 15;
      }

      // AI Insights (if available)
      if (aiInsights) {
        if (yPosition > 250) {
          doc.addPage();
          yPosition = 25;
        }

        doc.setFont('helvetica', 'bold');
        doc.setFontSize(16);
        doc.text('ü§ñ AI Analysis', 20, yPosition);
        yPosition += 10;
        
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(11);
        doc.text(`AI Score: ${aiInsights.overallAssessment?.score || '‚Äî'}/100`, 25, yPosition);
        yPosition += 10;

        if (aiInsights.overallAssessment?.strengths?.length > 0) {
          doc.text('‚úÖ Strengths:', 25, yPosition);
          yPosition += 6;
          aiInsights.overallAssessment.strengths.forEach((strength) => {
            doc.text(`‚Ä¢ ${strength}`, 30, yPosition);
            yPosition += 5;
          });
        }
      }

      // Footer
      doc.setFont('helvetica', 'normal');
      doc.setFontSize(8);
      doc.setTextColor(128, 128, 128);
      doc.text('Generated by AI Resume Analyzer', 20, 290);

      // Save PDF
      const fileName = `Resume_Analysis_${selectedResume.fileName?.replace(/\.[^/.]+$/, '') || 'Report'}_${new Date().toISOString().split('T')[0]}.pdf`;
      doc.save(fileName);

      toast.success('‚úÖ PDF generated successfully!', { id: 'pdf-export' });

    } catch (error) {
      console.error('PDF generation error:', error);
      toast.error('Failed to generate PDF', { id: 'pdf-export' });
    } finally {
      setIsExporting(false);
    }
  };

  // üîß REAL CHARTS EXPORT FUNCTION
  const exportCharts = async () => {
    setIsExporting(true);
    
    try {
      toast.loading('üñºÔ∏è Exporting charts...', { id: 'chart-export' });

      const chartElements = document.querySelectorAll('[data-export-chart]');
      
      if (chartElements.length === 0) {
        toast.error('No charts found to export');
        return;
      }

      let exportCount = 0;
      
      for (let i = 0; i < chartElements.length; i++) {
        const chartElement = chartElements[i];
        const chartId = chartElement.getAttribute('data-export-chart');
        
        try {
          const canvas = await html2canvas(chartElement, {
            backgroundColor: '#ffffff',
            scale: 2,
            useCORS: true
          });
          
          const link = document.createElement('a');
          link.href = canvas.toDataURL('image/png');
          link.download = `${chartId}_${new Date().getTime()}.png`;
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          
          exportCount++;
        } catch (chartError) {
          console.error(`Error exporting chart ${chartId}:`, chartError);
        }
      }

      if (exportCount > 0) {
        toast.success(`‚úÖ Exported ${exportCount} chart(s)!`, { id: 'chart-export' });
      } else {
        toast.error('Failed to export charts', { id: 'chart-export' });
      }

    } catch (error) {
      toast.error('Chart export failed', { id: 'chart-export' });
    } finally {
      setIsExporting(false);
    }
  };

  // üîß REAL SHARE FUNCTION
  const shareReport = () => {
    if (!selectedResume) {
      toast.error('Please select a resume to share');
      return;
    }

    const shareText = `Check out my Resume Analysis! Quality Score: ${selectedResume.analysis.qualityMetrics?.overallScore || Math.round(selectedResume.analysis.confidence * 100)}%, Skills: ${selectedResume.analysis.skillAnalysis?.totalSkills || 0}`;
    
    if (navigator.share) {
      navigator.share({
        title: 'Resume Analysis Report',
        text: shareText,
        url: window.location.href
      }).then(() => {
        toast.success('üì± Report shared successfully!');
      });
    } else {
      navigator.clipboard.writeText(`${shareText}\n${window.location.href}`)
        .then(() => toast.success('üîó Report link copied to clipboard!'))
        .catch(() => toast.error('Failed to copy to clipboard'));
    }
  };

  // üîß REAL EMAIL FUNCTION
  const emailReport = () => {
    if (!selectedResume) {
      toast.error('Please select a resume to share');
      return;
    }

    const { skillAnalysis, qualityMetrics } = selectedResume.analysis;
    
    const subject = encodeURIComponent(`Resume Analysis Report - ${selectedResume.fileName}`);
    const body = encodeURIComponent(`Hi,

I've generated a comprehensive resume analysis report:

üìÅ File: ${selectedResume.fileName}
üìÖ Analysis Date: ${new Date(selectedResume.analyzedAt).toLocaleDateString()}
üìà Quality Score: ${qualityMetrics?.overallScore || Math.round(selectedResume.analysis.confidence * 100)}%

üíº Skills Summary:
‚Ä¢ Total Skills: ${skillAnalysis?.totalSkills || 0}
‚Ä¢ High Confidence: ${skillAnalysis?.highConfidenceSkills || 0}
‚Ä¢ Expert Level: ${skillAnalysis?.expertSkills || 0}

üéØ Top Skills: ${skillAnalysis?.topSkills?.slice(0, 5).map(skill => skill.name || skill).join(', ') || 'None detected'}

Generated by AI Resume Analyzer
${window.location.origin}`);
    
    window.open(`mailto:?subject=${subject}&body=${body}`);
    toast.success('üìß Email client opened with report!');
  };

  return (
    <motion.div 
      className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-200 dark:border-gray-700"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex items-center justify-between mb-6">
        <div>
          <h3 className="text-lg font-bold text-gray-900 dark:text-gray-100 mb-2">üì§ Export & Share</h3>
          <p className="text-gray-600 dark:text-gray-400 text-sm">
            Export your analysis results and share insights
          </p>
        </div>
        
        {isExporting && (
          <div className="flex items-center space-x-2">
            <div className="animate-spin rounded-full h-5 w-5 border-2 border-blue-600 border-t-transparent"></div>
            <span className="text-sm text-blue-600 dark:text-blue-400">Exporting...</span>
          </div>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {/* Export PDF - REAL FUNCTION */}
        <button
          onClick={generatePDFReport}
          disabled={isExporting || !selectedResume}
          className="flex flex-col items-center p-4 border-2 border-dashed border-blue-300 dark:border-blue-600 rounded-lg hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <div className="text-2xl mb-2">üìÑ</div>
          <span className="font-medium text-gray-900 dark:text-gray-100 text-sm">Export PDF</span>
          <span className="text-xs text-gray-500 dark:text-gray-400 mt-1">Complete report</span>
        </button>

        {/* Export Charts - REAL FUNCTION */}
        <button
          onClick={exportCharts}
          disabled={isExporting}
          className="flex flex-col items-center p-4 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg hover:border-gray-500 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <div className="text-2xl mb-2">üñºÔ∏è</div>
          <span className="font-medium text-gray-900 dark:text-gray-100 text-sm">Export Charts</span>
          <span className="text-xs text-gray-500 dark:text-gray-400 mt-1">PNG images</span>
        </button>

        {/* Share Report - REAL FUNCTION */}
        <button
          onClick={shareReport}
          disabled={isExporting || !selectedResume}
          className="flex flex-col items-center p-4 border-2 border-dashed border-purple-300 dark:border-purple-600 rounded-lg hover:border-purple-500 hover:bg-purple-50 dark:hover:bg-purple-900/20 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <div className="text-2xl mb-2">üîó</div>
          <span className="font-medium text-gray-900 dark:text-gray-100 text-sm">Share Report</span>
          <span className="text-xs text-gray-500 dark:text-gray-400 mt-1">Generate link</span>
        </button>

        {/* Email Report - REAL FUNCTION */}
        <button
          onClick={emailReport}
          disabled={isExporting || !selectedResume}
          className="flex flex-col items-center p-4 border-2 border-dashed border-green-300 dark:border-green-600 rounded-lg hover:border-green-500 hover:bg-green-50 dark:hover:bg-green-900/20 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <div className="text-2xl mb-2">üìß</div>
          <span className="font-medium text-gray-900 dark:text-gray-100 text-sm">Email Report</span>
          <span className="text-xs text-gray-500 dark:text-gray-400 mt-1">Send via email</span>
        </button>
      </div>
    </motion.div>
  );
};

export default ExportManager;
